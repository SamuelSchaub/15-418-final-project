//
// raytracer.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus
///////////////////////////////////////////////////////////////////////////
// Vector types with external visibility from ispc code
///////////////////////////////////////////////////////////////////////////

#ifndef __ISPC_VECTOR_float3__
#define __ISPC_VECTOR_float3__
#ifdef _MSC_VER
__declspec( align(16) ) struct float3 { float v[3]; };
#else
struct float3 { float v[3]; } __attribute__ ((aligned(16)));
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Enumerator types with external visibility from ispc code
///////////////////////////////////////////////////////////////////////////

#ifndef __ISPC_ENUM_HittableType__
#define __ISPC_ENUM_HittableType__
enum HittableType {
    SPHERE = 0 
};
#endif


#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_Sphere__
#define __ISPC_STRUCT_Sphere__
struct Sphere {
    struct float3  center;
    float radius;
};
#endif

#ifndef __ISPC_STRUCT_Camera__
#define __ISPC_STRUCT_Camera__
struct Camera {
    float aspectRatio;
    int32_t imageWidth;
    int32_t samplesPerPixel;
    int32_t maxDepth;
    int32_t imageHeight;
    struct float3  center;
    struct float3  pixel00Location;
    struct float3  pixelDeltaU;
    struct float3  pixelDeltaV;
};
#endif

#ifndef __ISPC_STRUCT_HittableList__
#define __ISPC_STRUCT_HittableList__
struct HittableList {
    int32_t numObjects;
    struct Hittable * objects;
};
#endif

#ifndef __ISPC_STRUCT_Hittable__
#define __ISPC_STRUCT_Hittable__
struct Hittable {
    enum HittableType type;
    void * object;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
#if defined(__cplusplus)
    extern void dummySphere(struct Sphere &sphere);
#else
    extern void dummySphere(struct Sphere *sphere);
#endif // dummySphere function declaraion
#if defined(__cplusplus)
    extern void initialize(struct Camera &cam);
#else
    extern void initialize(struct Camera *cam);
#endif // initialize function declaraion
#if defined(__cplusplus)
    extern void renderImage(struct Camera &cam, const struct HittableList &hittables, int32_t * out);
#else
    extern void renderImage(struct Camera *cam, const struct HittableList *hittables, int32_t * out);
#endif // renderImage function declaraion
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
